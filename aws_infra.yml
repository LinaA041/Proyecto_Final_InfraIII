AWSTemplateFormatVersion: "2010-09-09"
Description: "arquitectura de la plataforma de comercio"

# Estos son parametros, como constantes del proyeccto que podemos utilzar cuando estemos definiendo los recursos
Parameters:
  EnvironmentName:
    Description: 'dev'
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
  
  InstanceType:
    Description: 'Tipo de instancia EC2'
    Type: String
    Default: 't2.micro'
    AllowedValues: ['t2.micro', 't2.small', 't2.medium']

  DBInstanceType:
    Description: 'Tipo de instancia RDS'
    Type: String
    Default: 'db.t3.micro'
    AllowedValues: ['db.t3.micro', 'db.t3.small', 'db.t3.medium']
  
  DBName:
    Description: 'Nombre de la base de datos'
    Type: String
    Default: 'simple_shop'

  DBUsername:
    Description: 'Usuario maestro de RDS'
    Type: String
    Default: 'user'
  
  DBPassword:
    Description: 'Contraseña de RDS (mínimo 8 caracteres)'
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 64
    Default: 'password'
    ConstraintDescription: 'Debe tener entre 8 y 64 caracteres'

  KeyName:
    Description: 'Nombre del par de claves EC2 existente'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'sandbox-key'  # Nombre que creaste en AWS
  
  SSHLocation:
    Description: 'IP permitida para acceder al Bastión'
    Type: String
    Default: '0.0.0.0/0'


Mappings:
  # Son tablas en los que nos permite mapear en este caso sobre regiones, util si nesecitamos 
  # cambiar de region, ya que los id de las AMI cambia segun la region
  RegionMap:
    us-east-1:
      AMI: 'ami-0f88e80871fd81e91'  # Amazon Linux 2

Resources:
  #Empezamos creando en donde vamos a poner todo, es decir la seccion de red (VPC)
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_VpcLattice.html
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: '10.0.0.0/16'   #Direccion de Red de la VPC
      EnableDnsSupport: true   # Es para la resolucion inter del DNS la linea 32 y 33
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-VPC'
  
  #Aqui creamos las subredes publicas que van a contener el balanc
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html#cfn-ec2-subnet-mappubliciponlaunch
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true #Asigna IP pública automáticamente (para recursos públicos)
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true #Asigna IP pública automáticamente (para recursos públicos)
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet2'

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet2'


  # este permite la comunicacion de la VPC con internet
  #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-IGW'
#Utilice el recurso AWS::EC2::VPCGatewayAttachment para asociar una puerta de enlace de Internet con una VPC
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #Ahora nesecitamos que las redes privadas tengan cierta comunicacion con internet, esto debido a 
  #actualizaciones de software
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EIP'

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NATGW'


  #Ahora vamos a hacer la tabla de enrutamiento entre las diferentes sub redes
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Public-RT'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Private-RT'
    
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway
  

  #Ahora vamos a asociar las tablas de enrutamiento con las subredes
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  #Ahora vamos a crear los diferentes grupos de seguridad 
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group para ALB - Permite HTTP/HTTPS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'Permitir HTTP desde cualquier lugar'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'Permitir HTTPS desde cualquier lugar'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'Permitir respuestas HTTP a las instancias'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'
          Description: 'Permitir respuestas al puerto 8080'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALB-SG'

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group para Web Servers - Permite trafico del ALB y Bastion'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: 'Permitir HTTP desde el ALB'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: 'Permitir acceso a Spring Boot desde el ALB'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: 'Permitir SSH desde el Bastion'
      SecurityGroupEgress:
        - IpProtocol: '-1'  # Todos los protocolos
          CidrIp: '0.0.0.0/0'
          Description: 'Permitir todo el trafico de salida'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Web-SG'

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group para Bastion Host'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Bastion-SG'
  # Solo permite conexiones MySQL (puerto 3306) desde las instancias EC2
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group para RDS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DB-SG'


  #Ahora vamos a crear el balanceador de carga
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${EnvironmentName}-ALB'
      Scheme: internet-facing  # Accesible desde Internet
      Subnets:
        - !Ref PublicSubnet # Debe estar en subred pública
        - !Ref PublicSubnet2 # Debe estar en subred pública
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALB'

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${EnvironmentName}-TG'
      Port: 8080  # Cambiado de 80 a 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      TargetType: instance

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup


  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: 'MySQL'
      DBInstanceClass: !Ref DBInstanceType
      AllocatedStorage: 20
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-RDS'
        


  #Ahora vamos a añadir donde se va a alojar el web server
  WebServerLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${EnvironmentName}-LaunchTemplate'
      LaunchTemplateData:
        ImageId: !FindInMap ['RegionMap', !Ref 'AWS::Region', 'AMI']
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        UserData: 
          Fn::Base64: 
           Fn::Sub: 
            - |
                #!/bin/bash -xe
                # --- PASO 1: Actualizar sistema e instalar dependencias ---
                sudo yum update -y
                sudo yum install -y java-21-amazon-corretto-devel java-21-amazon-corretto-jmods
                export JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto.x86_64
                export PATH=$JAVA_HOME/bin:$PATH
                sudo yum install -y nginx
                sudo yum install -y git
                sudo yum install -y maven
                sudo yum install -y nc

                sudo mkdir -p /var/app/backend
                sudo mkdir -p /var/www/frontend
                sudo chown -R ec2-user:ec2-user /var/app /var/www

                # --- PASO 2: Configurar y desplegar el backend Spring Boot ---
                # Clonar el repositorio del backend
                git clone https://github.com/juaca2004/BackEndEcommerse.git /var/app/backend
                cd /var/app/backend/ProyectoFinal

                # Crear archivo de configuración de Spring Boot
                cat > /var/app/backend/ProyectoFinal/src/main/resources/application.properties <<EOF
                spring.application.name=ProyectoFinal
                spring.jpa.hibernate.ddl-auto=update
                spring.datasource.url=jdbc:mysql://${DBEndpoint}:3306/simple_shop
                spring.datasource.username=${DBUsername}
                spring.datasource.password=${DBPassword}
                spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
                spring.datasource.tomcat.max-active=10
                spring.jpa.show-sql=true
                spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
                server.port=8080
                EOF
                
                # Compilar la aplicación
                mvn clean package


                # --- PASO 3: Configurar el frontend estático con Nginx ---
                # Clonar el repositorio del frontend
                git clone https://github.com/LinaA041/Proyecto_Final_InfraIII.git /var/www/frontend

                sudo mkdir -p /etc/nginx/conf.d
                sudo tee /etc/nginx/conf.d/ecommerce.conf > /dev/null <<'EOF'
                server {
                    listen 80;
                    server_name _;

                    # Servir archivos estáticos del frontend
                    location / {
                        root /var/www/frontend/EcomerseWeb/public;
                        index login.html;
                        try_files $uri $uri/ /login.html;
                    }

                    # Redirigir API al backend Spring Boot
                    location /api {
                        proxy_pass http://localhost:8080;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    }
                }
                EOF


                # --- PASO 4: Cargar el esquema SQL en RDS ---
                
                # Esperar a que RDS esté disponible (puede tomar varios minutos)
                while ! nc -z ${DBEndpoint} 3306; do
                  sleep 10
                  echo "Esperando que RDS esté disponible..."
                done

                # Cargar el esquema SQL (asumiendo que está en /var/www/frontend/esquema.sql)
                if [ -f "/var/www/frontend/EcomerseWeb/BaseDeDatosInicial.sql" ]; then
                  mysql -h ${DBEndpoint} -u ${DBUsername} -p${DBPassword} simple_shop < /var/www/frontend/EcomerseWeb/BaseDeDatosInicial.sql
                  echo "Esquema SQL cargado exitosamente"
                else
                  echo "Advertencia: No se encontró el archivo esquema.sql"
                fi


                # --- PASO 5: Configurar Spring Boot como servicio ---
                
                sudo tee /etc/systemd/system/springboot.service > /dev/null << 'EOL'
                [Unit]
                Description=Spring Boot Application
                After=syslog.target
                After=network.target

                [Service]
                User=ec2-user
                WorkingDirectory=/var/app/backend/ProyectoFinal
                ExecStart=/usr/bin/java -jar /var/app/backend/ProyectoFinal/target/*.jar
                SuccessExitStatus=143
                Restart=always
                RestartSec=10
                StandardOutput=syslog
                StandardError=syslog
                SyslogIdentifier=springboot

                [Install]
                WantedBy=multi-user.target
                EOL


                # --- PASO 6: Iniciar servicios ---
        
                # Habilitar e iniciar servicios
                sudo systemctl enable nginx
                sudo systemctl start nginx
                
                sudo systemctl enable springboot.service
                sudo systemctl start springboot.service

                # Verificar estado de los servicios
                systemctl status nginx
                systemctl status springboot.service
                
                echo "Implementación completada exitosamente"

            - DBEndpoint: !GetAtt DBInstance.Endpoint.Address
              DBUsername: !Ref DBUsername
              DBPassword: !Ref DBPassword
    



    # ==================== AUTO SCALING GROUP ====================
  WebServerAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3  # Límite del sandbox
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-WebServer'
          PropagateAtLaunch: true

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group para RDS'
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DBSubnetGroup'
  
    # ==================== BASTION HOST ====================
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: !FindInMap ['RegionMap', !Ref 'AWS::Region', 'AMI']
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Bastion'


Outputs:
  WebsiteURL:
    Description: 'URL de acceso a la aplicación'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  BastionHostIP:
    Description: 'IP pública del Bastión Host'
    Value: !GetAtt BastionHost.PublicIp

  DBEndpoint:
    Description: 'Endpoint de la base de datos RDS'
    Value: !GetAtt DBInstance.Endpoint.Address

  SSHCommand:
    Description: 'Comando para conectarse al Bastión'
    Value: !Sub 'ssh -i ${KeyName}.pem ec2-user@${BastionHost.PublicIp}'